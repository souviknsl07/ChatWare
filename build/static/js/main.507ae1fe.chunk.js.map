{"version":3,"sources":["Firebase.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Message","forwardRef","ref","message","isUser","username","className","style","marginBottom","Card","CardContent","Typography","color","variant","component","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","src","alt","href","rel","fontFamily","key","BottomNavigation","FormControl","Input","type","placeholder","value","onChange","event","target","IconButton","disabled","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"uTAaeA,EAHKC,IAASC,cARN,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,cACnBC,MAAO,6CAGaC,Y,wBCgBPC,G,MAvBDC,sBAAW,WAAqBC,GAAQ,IAA3BC,EAA0B,EAA1BA,QAEpBC,EAF8C,EAAlBC,WAETF,EAAQE,SAEjC,OACC,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAC9C,yBAAKG,MAAO,CAACC,aAAa,SACxBJ,GAAD,UAAYD,EAAQE,UAAY,iBAEjC,kBAACI,EAAA,EAAD,CAAMH,UAAWF,EAAO,mBAAmB,qBACtC,kBAACM,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYL,UAAU,OAAOM,MAAM,QAAQC,QAAQ,KAAKC,UAAU,MAC7DX,EAAQA,gB,iCC0EPY,G,MA/EL,WAAM,IAAD,EAEYC,mBAAS,IAFrB,mBAENC,EAFM,KAECC,EAFD,OAGkBF,mBAAS,CAAC,CAACX,SAAS,GAAGF,QAAQ,MAHjD,mBAGNgB,EAHM,KAGIC,EAHJ,OAIkBJ,mBAAS,IAJ3B,mBAINX,EAJM,KAIIgB,EAJJ,KAMbC,qBAAU,WACTD,EAAYE,OAAO,2BAClB,IAGFD,qBAAU,WACThC,EAAGkC,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACXP,EAAYO,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAG,CAACC,GAAGD,EAAIC,GAAI5B,QAAQ2B,EAAIE,iBAE3D,IAiBH,OACE,yBAAK1B,UAAU,OACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,WACf,iDACE,yBAAKA,UAAU,QACf2B,IAAI,WACJC,IAAI,KACJ,0BAAMC,KAAK,gEAAgEC,IAAI,eAC/E,0BAAMD,KAAK,6EAA6EC,IAAI,eAC5F,wBAAI7B,MAAO,CAAC8B,WAAW,oBAAvB,YACA,yDACA,wBAAI9B,MAAO,CAAC8B,WAAW,kBAAvB,WAAkDhC,IAGlD,kBAAC,IAAD,KAECc,EAASU,KAAI,gBAAE1B,EAAF,EAAEA,QAAQ4B,EAAV,EAAUA,GAAV,OAGf,kBAAC,EAAD,CAASO,IAAKP,EAAK1B,SAAUA,EAAUF,QAASA,SAOlD,kBAACoC,EAAA,EAAD,KACG,0BAAMjC,UAAU,aACf,kBAACkC,EAAA,EAAD,CAAalC,UAAU,oBAC1B,kBAACmC,EAAA,EAAD,CAAOnC,UAAU,aAAaoC,KAAK,OAAOC,YAAY,0BAA0BC,MAAO3B,EAAO4B,SAAU,SAAAC,GAAK,OAAE5B,EAAS4B,EAAMC,OAAOH,UACrI,kBAACI,EAAA,EAAD,CAAY1C,UAAU,kBAAkBO,QAAQ,YAC5CoC,UAAWhC,EACXL,MAAM,UACN8B,KAAK,SACLQ,QAlDY,SAACJ,GAClBA,EAAMK,iBACN7D,EAAGkC,WAAW,YAAY4B,IAAI,CAC7BjD,QAAQc,EACRZ,SAASA,EACTgD,UAAU9D,IAASQ,UAAUuD,WAAWC,oBAGzCrC,EAAS,MA2CJ,kBAAC,IAAD,aCrEYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtE,c","file":"static/js/main.507ae1fe.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCd1rGQNED_rr15IepZ9VTDV1Uvpfbn1Zs\",\r\n  authDomain: \"chatware-a334c.firebaseapp.com\",\r\n  projectId: \"chatware-a334c\",\r\n  storageBucket: \"chatware-a334c.appspot.com\",\r\n  messagingSenderId: \"84139593768\",\r\n  appId: \"1:84139593768:web:561871bc147636d449e51d\"\r\n};\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db= firebaseApp.firestore();\r\n\r\nexport default db;","import React,{forwardRef} from 'react'\r\nimport {Card,CardContent,Typography} from '@material-ui/core'\r\nimport './Message.css'\r\n\r\nconst Message=forwardRef(({message,username}, ref)=> {\r\n\t\r\n\tconst isUser= username===message.username;\r\n\t\r\n\treturn (\r\n\t\t<div ref={ref} className={`message ${isUser && 'message_user'}`}>\r\n\t\t\t<div style={{marginBottom:'5px'}}>\r\n\t\t\t{!isUser&&`${message.username || 'Unknown User'}`}\r\n\t\t\t</div>\r\n\t\t\t<Card className={isUser?'message_userCard':'message_guestCard'}>\r\n\t\t      <CardContent>\r\n\t\t      \t<Typography className='text' color=\"white\" variant=\"h5\" component=\"h2\">\r\n\t\t           {message.message}\r\n\t\t        </Typography>\r\n\t          </CardContent>\r\n\t\t    </Card>\r\n\t\t    \r\n\t\t</div>\r\n\t\t\r\n\t\t\r\n\t)\r\n})\r\n\r\nexport default Message;","import React, {useState, useEffect} from 'react';\nimport {FormControl,Input,BottomNavigation} from '@material-ui/core';\nimport db from './Firebase';\nimport Message from './Message';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\nimport './App.css';\n\nconst App=()=> {\n\n  const [input, setInput]= useState('');\n  const [messages, setMessages]= useState([{username:'',message:''}]);\n  const [username, setUsername]= useState('');\n\n  useEffect(()=> {\n  \tsetUsername(prompt('Enter your name here'))\n  },[])\n\n\n  useEffect(() => {\n  \tdb.collection('messages')\n  \t.orderBy('timestamp', 'desc')\n  \t.onSnapshot(snapshot=>{\n  \t\tsetMessages(snapshot.docs.map(doc=>({id:doc.id, message:doc.data()})))\n  \t})\n  }, [])\n  \n  const sendMessage=(event)=>{\n  \tevent.preventDefault();\n  \tdb.collection('messages').add({\n  \t\tmessage:input,\n  \t\tusername:username,\n  \t\ttimestamp:firebase.firestore.FieldValue.serverTimestamp()\n  \t})\n  \t\n  \tsetInput('');\n  }\n  \n\n  \n \n\n  return (\n    <div className=\"App\">\n    <div className=\"messages\">\n    <div className='content'>\n    <p>Refresh to log out</p>\n      <img className='image' \n      src=\"chat.png\" \n      alt=''/>\n      <link href=\"https://fonts.googleapis.com/css2?family=Lobster&display=swap\" rel=\"stylesheet\"/>\n      <link href=\"https://fonts.googleapis.com/css2?family=Balsamiq+Sans:ital@1&display=swap\" rel=\"stylesheet\"/>\n      <h1 style={{fontFamily:'Lobster,cursive'}}>ChatWare</h1>\n      <p>Powered by Â©Souvik Nath</p>\n      <h3 style={{fontFamily:'Balsamiq Sans'}}>Welcome {username}</h3>\n\n    </div>\n      <FlipMove>\n\t  \t{\n      \tmessages.map(({message,id}) => \n      \t\t\n      \t\t(\n \t\t\t\t<Message key={id}  username={username} message={message}/>\n \t\t\t)\n      \t)\n      }\n\t  </FlipMove>\n\t  </div>\n\n\t  <BottomNavigation>\n      <form className='form__app'>\n      \t<FormControl className='app__formControl'>\n\t\t  <Input className='app__input' type='text' placeholder='Type your messages here' value={input} onChange={event=>setInput(event.target.value)}/>\n\t\t  <IconButton className='app__iconButton' variant=\"contained\"\n\t      \tdisabled={!input} \n\t      \tcolor=\"primary\"\n\t      \ttype='submit' \n\t      \tonClick={sendMessage} >\n\t      \t<SendIcon/>\n\t      </IconButton>\n\t\t</FormControl>\n\t  </form>\n\t  </BottomNavigation>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}